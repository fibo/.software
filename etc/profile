
# Define and create .software folders.

DOTSOFTWARE_HOME_DIR=~/.software

DOTSOFTWARE_ROOT_DIR=${DOTSOFTWARE_ROOT_DIR:-$DOTSOFTWARE_HOME_DIR}
mkdir -p $DOTSOFTWARE_ROOT_DIR
export DOTSOFTWARE_ROOT_DIR

DOTSOFTWARE_TMP_DIR=${DOTSOFTWARE_TMP_DIR:-/tmp/${USER}.software}
mkdir -p $DOTSOFTWARE_TMP_DIR
export DOTSOFTWARE_TMP_DIR
DOTSOFTWARE_TMP_DIR_RETENTION=3 # days

# Make installed software avalilable.

## Avoid C_INCLUDE_PATH ending with a colon, otherwise Perl build will fail.
if [ -z "$C_INCLUDE_PATH" ]; then
	C_INCLUDE_PATH=$DOTSOFTWARE_ROOT_DIR/include
else
	C_INCLUDE_PATH=$DOTSOFTWARE_ROOT_DIR/include:$C_INCLUDE_PATH
fi

export C_INCLUDE_PATH

if [ -z "$LIBRARY_PATH" ]; then
	LIBRARY_PATH=$DOTSOFTWARE_ROOT_DIR/lib
else
	LIBRARY_PATH=$DOTSOFTWARE_ROOT_DIR/lib:$LIBRARY_PATH
fi

export LIBRARY_PATH

if [ -z "$LD_LIBRARY_PATH" ]; then
	LD_LIBRARY_PATH=$DOTSOFTWARE_ROOT_DIR/lib
else
	LD_LIBRARY_PATH=$DOTSOFTWARE_ROOT_DIR/lib:$LD_LIBRARY_PATH
fi

if [ -z "$PKG_CONFIG_PATH" ]; then
	PKG_CONFIG_PATH=$DOTSOFTWARE_ROOT_DIR/lib/pkgconfig
else
	PKG_CONFIG_PATH=$DOTSOFTWARE_ROOT_DIR/lib/pkgconfig:$PKG_CONFIG_PATH
fi

export PKG_CONFIG_PATH

export MANPATH=$DOTSOFTWARE_ROOT_DIR/share/man:$MANPATH
export PATH=$DOTSOFTWARE_ROOT_DIR/bin:$PATH

#-------------------------------------------------------------------------------

.software_install() {
	# Cleanup DOTSOFTWARE_TMP_DIR
	find $DOTSOFTWARE_TMP_DIR -depth -follow -ctime +$DOTSOFTWARE_TMP_DIR_RETENTION -user $USER -exec rm -rf {} \;

	# Change directory into DOTSOFTWARE_HOME_DIR, just to popd when install
        # finishes, in order to go back to starting directory.
	pushd $DOTSOFTWARE_HOME_DIR 1> /dev/null

	SOFTWARE_NAME=$1

	# Require parameter
	if [ -z "$SOFTWARE_NAME" ]; then
		echo USAGE: .software_install Foo
		popd 1> /dev/null
		return 1
	fi

	ETC_DIR=$DOTSOFTWARE_HOME_DIR/etc/$SOFTWARE_NAME

	# Check that SOFTWARE_NAME dir exists.
	if [ ! -d $ETC_DIR ]; then
		echo Unknown software: $SOFTWARE_NAME
		popd 1> /dev/null
		return 1
	fi

	source $DOTSOFTWARE_HOME_DIR/etc/versions

	BUILD_DIR=$DOTSOFTWARE_TMP_DIR/build
	mkdir -p $BUILD_DIR
	export BUILD_DIR

	SOURCES_DIR=$DOTSOFTWARE_ROOT_DIR/src
	mkdir -p $SOURCES_DIR
	export SOURCES_DIR

	function _get_sources() {
		cd $SOURCES_DIR
		wget -N $SOURCES_URI
	}

	function _read_sources_filename() {
		cd $SOURCES_DIR
		SOURCES_FILENAME=$(basename $SOURCES_URI)
	}

	function _read_current_version_dir() {
		cd $SOURCES_DIR
		CURRENT_VERSION_DIR=$(tar tzf $SOURCES_FILENAME | head -1)
	}

	function _extract() {
		cd $BUILD_DIR
		tar xzf $SOURCES_DIR/$SOURCES_FILENAME
	}

	function _build() {
		cd $CURRENT_VERSION_DIR
		./configure --prefix=$DOTSOFTWARE_ROOT_DIR && make install
	}

	source $ETC_DIR/installrc

	_get_sources
	_read_sources_filename
	_read_current_version_dir
	_extract
	_build

	# Go back to starting dir.
	popd 1> /dev/null

	# Cleanup variables and functions.
	unset BUILD_DIR
	unset CURRENT_VERSION_DIR
	unset SOFTWARE_NAME
	unset SOURCES_DIR
	unset SOURCES_FILENAME
	unset SOURCES_URI

	unset _build
	unset _extract
	unset _get_sources
	unset _read_current_version_dir
}

#-------------------------------------------------------------------------------

# Autocompletion.

_dotsoftware_install_completion() {
	local cur prev opts
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
        # Every ~/.software/etc/ subfolder maps to an installable software.
	opts=`find ~/.software/etc/ -maxdepth 1 -mindepth 1 -type d | while read dir; do echo $(basename $dir); done`

	if [[ ${cur} == * ]] ; then
		COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
		return 0
	fi
}

complete -F _dotsoftware_install_completion .software_install

